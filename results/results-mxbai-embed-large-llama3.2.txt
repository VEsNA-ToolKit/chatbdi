[USER] "John is the father of Sarah." 
[EMBED] parent(X, Y). 
[GENERATE] `father(X, Y) <- parent(Y, X).`

[USER] "Sarah is the child of John." 
[EMBED] sibling(X, Y). 
[GENERATE] `parent(X, Y) :- sibling(Z, Y), X = Z`.

[USER] "John's sister is Sarah." 
[EMBED] sibling(X, Y). 
[GENERATE] `sister(X, Y) :- sibling(Y, X).`

[USER] "John is married to Emily." 
[EMBED] married(X, Y). 
[GENERATE] ```married(john, emily).```

[USER] "Emily works in marketing." 
[EMBED] employed(X, Z). 
[GENERATE] ``` employed(Emily, Marketing). ```

[USER] "John is a friend of Alex." 
[EMBED] friend(X, Y). 
[GENERATE] `friend(X, 'Alex').`

[USER] "John owns a car." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] `owns_vehicle(john, car).`

[USER] "The Smiths live in Chicago." 
[EMBED] lives_with(X, Y). 
[GENERATE] ```sql
lives_in(CHICAGO, SMITH).
```

[USER] "John loves to read." 
[EMBED] loves(X, Y). 
[GENERATE] ``` LovesReading(John). ```

[USER] "Jane hates spiders." 
[EMBED] hates(X, Y). 
[GENERATE] ```prolog
hates(jane, spider).
```

[USER] "Jane teaches history at school." 
[EMBED] teacher_of(X, Y). 
[GENERATE] `teacher_of(jane, subject_history).`

[USER] "Emma is the student of Jane." 
[EMBED] student_of(X, Z). 
[GENERATE] `parent_of(X, Z) :- parent_of(Z, X), father(X).

[USER] "Michael lives with his parents." 
[EMBED] parent(X, Y). 
[GENERATE] `parent(Michael, Father), parent(Michael, Mother)`

[USER] "Tom has a dog." 
[EMBED] has_pet(X, Y). 
[GENERATE] ```has_dog(Tom)```

[USER] "Sarah visits her grandparents." 
[EMBED] sibling(X, Y). 
[GENERATE] ```sibling(X, Y) :- parent(X, G), parent(Y, G).```

[USER] "John owns a motorcycle." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] ownVehicle(John, Motorcycle)

[USER] "John prefers coffee." 
[EMBED] prefers(X, Y). 
[GENERATE] `prefers(John, Coffee).`

[USER] "Alex can travel to Paris." 
[EMBED] can_travel(X, Y). 
[GENERATE] `can_travel(Alex, Paris).`

[USER] "John has a degree in computer science." 
[EMBED] student_of(X, Z). 
[GENERATE] student_of(john, computer_science).

[USER] "Laura needs help with math." 
[EMBED] needs_help_with(X, Y). 
[GENERATE] ```prolog
needs_help_with(math, X) :- user(Laura).
```

[USER] "John's mother is the sister of his aunt." 
[EMBED] sibling(X, Y). 
[GENERATE] `sibling(mother(John), aunt(John)).`

[USER] "Tom is employed by Microsoft." 
[EMBED] employed(X, Z). 
[GENERATE] `employed(tom, Microsoft).`

[USER] "Sarah and John are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] `parent(X, Y)`

[USER] "Emily teaches English at school." 
[EMBED] teacher_of(X, Y). 
[GENERATE] `teacher_of(english, emily)`.

[USER] "Michael owns a bicycle." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] `has_bicycle(Michael).`

[USER] "Jane is married to David." 
[EMBED] married(X, Y). 
[GENERATE] `married(jane, david).`

[USER] "Alex lives in London." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(London, Alex).`

[USER] "Laura loves reading books." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(laura, book)`

[USER] "John has a pet cat." 
[EMBED] has_pet(X, Y). 
[GENERATE] `has_pet(X, 'cat').`

[USER] "Sarah is the teacher of Emma." 
[EMBED] teacher_of(X, Y). 
[GENERATE] ```teacher_of(Sarah, Emma).```

[USER] "Tom owns a house." 
[EMBED] owns(X, Y). 
[GENERATE] `has_owner(Tom, House)`.

[USER] "John hates basketball." 
[EMBED] hates(X, Y). 
[GENERATE] `hates(john, basketball).`

[USER] "Emily is employed by Google." 
[EMBED] employed(X, Z). 
[GENERATE] `employed(Emily, Google).`

[USER] "Michael prefers soccer." 
[EMBED] loves(X, Y). 
[GENERATE] ```likes(X, Y) :- preferring(T), T = soccer, X \= Y.
```

[USER] "Jane can travel to Rome." 
[EMBED] can_travel(X, Y). 
[GENERATE] ```can_travel(jane, "rome").```

[USER] "Alex is married to his friend." 
[EMBED] married(X, Y). 
[GENERATE] `married(Alex, Alex'sFriend)`.

[USER] "Laura needs help with programming." 
[EMBED] needs_help_with(X, Y). 
[GENERATE] `needs_help_with(programming, Laura).`

[USER] "John owns a house in New York." 
[EMBED] owns(X, Y). 
[GENERATE] own(X, Y) :- john(X), new york(Y).

[USER] "Sarah loves playing tennis." 
[EMBED] loves(X, Y). 
[GENERATE] ```sarah(loves, X, tennis).```

[USER] "Tom visits his grandparents." 
[EMBED] visits(X, Y). 
[GENERATE] `visits(Tom, Tom'sGrandparents)`

[USER] "John's father is the brother of his uncle." 
[EMBED] sibling(X, Y). 
[GENERATE] ```parent(X, Z) :- sibling(Z, X).```

[USER] "David is employed by Amazon." 
[EMBED] employed(X, Z). 
[GENERATE] `employed(david, amazon).`

[USER] "Emily and her sister are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] ``` sibling(X, 'Emily') :- parent(X, 'Emily').
sibling('Emily', X) :- parent('Emily', X).
```

[USER] "Michael lives in Los Angeles." 
[EMBED] lives_with(X, Y). 
[GENERATE] `lives_in(X, Y).`

[USER] "Jane teaches at a university." 
[EMBED] student_of(X, Z). 
[GENERATE] `teacher_of(Jane, X)`.

[USER] "Alex owns an apartment." 
[EMBED] owns(X, Y). 
[GENERATE] own(X, A) : X = Alex and A = Apartment.

[USER] "Laura loves singing." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(laura, singing).`

[USER] "John has a pet dog." 
[EMBED] has_pet(X, Y). 
[GENERATE] has_pet(John, Dog)

[USER] "Sarah visits her cousins." 
[EMBED] sibling(X, Y). 
[GENERATE] ```sibling(Sarah, X) :- cousin(X, Sarah).```

[USER] "Tom hates hiking." 
[EMBED] hates(X, Y). 
[GENERATE] ```tom(hiking), \neg hates(Tom, hiking).```

[USER] "John's grandmother is the sister of his great-grandmother." 
[EMBED] sibling(X, Y). 
[GENERATE] `grandparent(X, Y) :- sibling(X, G), parent(G, Y)`

[USER] "Rachel is employed by IBM." 
[EMBED] employed(X, Z). 
[GENERATE] ```EmployedBy(X, Y) :- employed(X), X = Y.```

[USER] "Emily and her brother are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] `parent(X, Y) :- sibling(X, Y), X \= Y.`

[USER] "Michael owns a car." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] ```own_car(Michael)```

[USER] "Jane is married to her colleague." 
[EMBED] married(X, Y). 
[GENERATE] `married(X, X)`.

[USER] "Alex lives in Paris." 
[EMBED] loves(X, Y). 
[GENERATE] `lives_in(Paris, X)`.

[USER] "Laura loves photography." 
[EMBED] loves(X, Y). 
[GENERATE] ```photography(Laura).```

[USER] "John has a pet bird." 
[EMBED] has_pet(X, Y). 
[GENERATE] `has_pet_bird(X, Y)`: `- has_person(X), - has_animal(Y), - is_bird(Y).`

[USER] "Sarah visits her friends." 
[EMBED] friend(X, Y). 
[GENERATE] `visitsHerFriend(X, Sarah).`

[USER] "Tom has a sibling." 
[EMBED] sibling(X, Y). 
[GENERATE] `brother(Tom, X) :- sibling(X, Tom).`

[USER] "John's uncle is the brother of his cousin." 
[EMBED] sibling(X, Y). 
[GENERATE] `uncle(X, Y) :- sibling(Z, X), parent(Y, Z).`

[USER] "David teaches computer science at school." 
[EMBED] teacher_of(X, Y). 
[GENERATE] ```logical_property(teacher_of(X, X), David)```

[USER] "Emily owns an apartment." 
[EMBED] married(X, Y). 
[GENERATE] `married(X, Y) --> owns_an_apartment(X)`

[USER] "Michael prefers hiking." 
[EMBED] can_travel(X, Y). 
[GENERATE] ```python
def can_hike(X):
    return X == 'hiking'
```

In this code, `can_hike` is a predicate that takes one argument, `X`, and returns whether it is hiking or not. This predicate represents the modified logical property based on Michael's preference for hiking.

[USER] "Jane can travel to Japan." 
[EMBED] can_travel(X, Y). 
[GENERATE] ```java
can_travel(Jane, Japan).
```

[USER] "Alex is married to his colleague." 
[EMBED] married(X, Y). 
[GENERATE] ```marriagePartner(X, Y) :- married(X, Y), Y = colleague(X).```

[USER] "Laura needs help with writing." 
[EMBED] needs_help_with(X, Y). 
[GENERATE] ```prolog
needs_help_with(Laura, Writing).
```

[USER] "John owns a house in Chicago." 
[EMBED] owns(X, Y). 
[GENERATE] ``` `owns_john(X) :- house(X, 'Chicago').```

[USER] "Sarah loves playing football." 
[EMBED] loves(X, Y). 
[GENERATE] ```loves(sarah, football).```

[USER] "Tom visits his friends." 
[EMBED] friend(X, Y). 
[GENERATE] `visitFriend(Tom, X) :- friend(X, Tom).`

[USER] "John's great-grandmother is the sister of his great-aunt." 
[EMBED] sibling(X, Y). 
[GENERATE] ```parent(GreatGrandmaX, John) & parent(GreatAuntY, John), sibling(X, Y).```

[USER] "Rachel is employed by Apple." 
[EMBED] employed(X, Z). 
[GENERATE] `employed(rachel, apple).`

[USER] "Emily and her friend are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] `parent(X, Y)`

[USER] "Michael lives in New York." 
[EMBED] lives_with(X, Y). 
[GENERATE] `lives_in(X, Y).`

[USER] "Jane teaches at a high school." 
[EMBED] student_of(X, Z). 
[GENERATE] `teacher_of(Jane, X)`

[USER] "Alex owns an SUV." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] ```owns_suv(Alex)```

This modification is based on the idea that owning a vehicle does not necessarily mean owning any specific type of vehicle (e.g., SUV), so we generalize the property to state that Alex owns a specific type of vehicle (an SUV).

[USER] "Laura loves cooking." 
[EMBED] loves(X, Y). 
[GENERATE] ```laura(Laura), loves(laura, X, Y) -> X = "cooking", Y = True```

[USER] "John has a pet rabbit." 
[EMBED] has_pet(X, Y). 
[GENERATE] ```has_pet(john, 'rabbit').```

[USER] "Sarah visits her parents." 
[EMBED] parent(X, Y). 
[GENERATE] `visited Parent(X), Sarah Visit Parent(X)`.

[USER] "Tom hates tennis." 
[EMBED] hates(X, Y). 
[GENERATE] ```tom(hates, tennis).```

[USER] "John's great-uncle is the brother of his cousin." 
[EMBED] sibling(X, Y). 
[GENERATE] `parent(X, Z) | sibling(X, Z).`

[USER] "David owns a house." 
[EMBED] owns(X, Y). 
[GENERATE] ```is_occupied_by(David, House).```

[USER] "Emily and her sister are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] ```sibling(E, Emily).
sibling(E, SisterOfE).
parent(P, E) :-
    parent(P, Mother),
    sibling(Mother, SisterOfE).
```

[USER] "Michael prefers skiing." 
[EMBED] loves(X, Y). 
[GENERATE] ```likes(X, Skiing).```

[USER] "Jane can travel to Australia." 
[EMBED] can_travel(X, Y). 
[GENERATE] `can_travel(jane, australia).`

[USER] "Alex is married to his friend." 
[EMBED] married(X, Y). 
[GENERATE] ```spouse(X, X), spouse(X, Y) -> married(X, Y).```

[USER] "Laura needs help with art." 
[EMBED] needs_help_with(X, Y). 
[GENERATE] ```prolog
needs_help_with(Laura, Art).
```

[USER] "John owns a bike." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] `has_bike(John)`.

[USER] "Sarah loves playing basketball." 
[EMBED] loves(X, Y). 
[GENERATE] loves(sarah, basketball).

[USER] "Tom visits his friends." 
[EMBED] friend(X, Y). 
[GENERATE] `visitor(Tom, X) :- friend(X, Tom).`

[USER] "John's great-grandfather is the brother of his grandfather." 
[EMBED] sibling(X, Y). 
[GENERATE] `grandparent(X, Z).`

[USER] "Rachel teaches at a university." 
[EMBED] student_of(X, Z). 
[GENERATE] `teaches_at(university(Z), Rachel)`.

[USER] "Emily and her colleague are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] `colleague(X, Y) :- sibling(X, Y), Y = "emily"`.

[USER] "Michael lives in Los Angeles." 
[EMBED] lives_with(X, Y). 
[GENERATE] `lives_in(X, LA).`

[USER] "Jane is married to her friend." 
[EMBED] married(X, Y). 
[GENERATE] `married(jane, jane's_friend).`

[USER] "Alex owns an apartment." 
[EMBED] owns(X, Y). 
[GENERATE] ```alex(Owner), owns(Alex, Apt).```

[USER] "Laura loves music." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(laura, music).`

[USER] "John has a pet parrot." 
[EMBED] married(X, Y). 
[GENERATE] `hasPetParrot(X, Y)`

[USER] "Sarah visits her cousins." 
[EMBED] sibling(X, Y). 
[GENERATE] ```sibling(X, Y) :- parent(Z), X = Z, Y = Z, cousin(Y).```

[USER] "Tom hates swimming." 
[EMBED] hates(X, Y). 
[GENERATE] `hates(Tom, Swimming).`

