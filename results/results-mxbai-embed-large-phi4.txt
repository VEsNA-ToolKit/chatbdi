[USER] "John is the father of Sarah." 
[EMBED] parent(X, Y). 
[GENERATE] ```prolog
parent(john, sarah).
```

[USER] "Sarah is the child of John." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
parent(john, sarah).
```

[USER] "John's sister is Sarah." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
sibling(john, sarah).
sibling(sarah, john).
```

[USER] "John is married to Emily." 
[EMBED] married(X, Y). 
[GENERATE] ```prolog
married(john, emily).
```

[USER] "Emily works in marketing." 
[EMBED] employed(X, Z). 
[GENERATE] `employed(emily, marketing).`

[USER] "John is a friend of Alex." 
[EMBED] friend(X, Y). 
[GENERATE] ```prolog
friend(john, alex).
```

[USER] "John owns a car." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] ```prolog
owns_vehicle(john, car).
```

[USER] "The Smiths live in Chicago." 
[EMBED] lives_with(X, Y). 
[GENERATE] ```plaintext
lives_in(family(Smiths), city(Chicago)).
```

[USER] "John loves to read." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(john, reading).`

[USER] "Jane hates spiders." 
[EMBED] hates(X, Y). 
[GENERATE] ```prolog
hates(jane, spiders).
```

[USER] "Jane teaches history at school." 
[EMBED] teacher_of(X, Y). 
[GENERATE] ```prolog
teacher_of(jane, history).
```

[USER] "Emma is the student of Jane." 
[EMBED] student_of(X, Z). 
[GENERATE] ```prolog
student_of(emma, jane).
```

[USER] "Michael lives with his parents." 
[EMBED] parent(X, Y). 
[GENERATE] ```prolog
lives_with(michael, parent_of_michael).
```

[USER] "Tom has a dog." 
[EMBED] has_pet(X, Y). 
[GENERATE] `has_pet(tom, dog).`

[USER] "Sarah visits her grandparents." 
[EMBED] sibling(X, Y). 
[GENERATE] `sibling(Grandparent, GrandparentSibling) :- visits(Sarah, Grandparent).`

[USER] "John owns a motorcycle." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] `owns_vehicle(john, motorcycle).`

[USER] "John prefers coffee." 
[EMBED] prefers(X, Y). 
[GENERATE] `prefers(john, coffee).`

[USER] "Alex can travel to Paris." 
[EMBED] can_travel(X, Y). 
[GENERATE] ```prolog
can_travel(alex, paris).
```

[USER] "John has a degree in computer science." 
[EMBED] student_of(X, Z). 
[GENERATE] ``` 
has_degree('John', 'computer_science').
```

[USER] "Laura needs help with math." 
[EMBED] needs_help_with(X, Y). 
[GENERATE] ```prolog
needs_help_with('Laura', 'math').
```

[USER] "John's mother is the sister of his aunt." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
mother_of(mother(X), aunts(X)).
``` 

This logical property states that John's mother is an aunt (sister) of one of John's aunts. This implies sibling relationships between John's mother and his aunt, capturing the essence of the given sentence.

[USER] "Tom is employed by Microsoft." 
[EMBED] employed(X, Z). 
[GENERATE] ```prolog
employed(tom, microsoft).
```

[USER] "Sarah and John are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] `sibling(sarah, john).`  
`sibling(john, sarah).`

[USER] "Emily teaches English at school." 
[EMBED] teacher_of(X, Y). 
[GENERATE] ```prolog
teacher_of(english, emily).
teaches_at(emily, school).
```

[USER] "Michael owns a bicycle." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] `owns_vehicle(michael, bicycle).`

[USER] "Jane is married to David." 
[EMBED] married(X, Y). 
[GENERATE] `married(jane, david).`

[USER] "Alex lives in London." 
[EMBED] loves(X, Y). 
[GENERATE] lives_in(Alex, london).

[USER] "Laura loves reading books." 
[EMBED] loves(X, Y). 
[GENERATE] ```prolog
loves(laura, reading_books).
```

[USER] "John has a pet cat." 
[EMBED] has_pet(X, Y). 
[GENERATE] `has_pet(john, cat).`

[USER] "Sarah is the teacher of Emma." 
[EMBED] teacher_of(X, Y). 
[GENERATE] ```prolog
teacher_of(sarah, emma).
```

[USER] "Tom owns a house." 
[EMBED] owns(X, Y). 
[GENERATE] ```prolog
owns(tom, house).
```

[USER] "John hates basketball." 
[EMBED] hates(X, Y). 
[GENERATE] ```prolog
hates(john, basketball).
```

[USER] "Emily is employed by Google." 
[EMBED] employed(X, Z). 
[GENERATE] `employed(emily, google).`

[USER] "Michael prefers soccer." 
[EMBED] loves(X, Y). 
[GENERATE] `prefers(michael, soccer).`

[USER] "Jane can travel to Rome." 
[EMBED] can_travel(X, Y). 
[GENERATE] `can_travel(jane, rome).`

[USER] "Alex is married to his friend." 
[EMBED] married(X, Y). 
[GENERATE] `married(alex, X), friend(alex, X).`

[USER] "Laura needs help with programming." 
[EMBED] needs_help_with(X, Y). 
[GENERATE] ```prolog
needs_help_with(laura, programming).
```

[USER] "John owns a house in New York." 
[EMBED] owns(X, Y). 
[GENERATE] `owns(john, house_in_new_york).`

[USER] "Sarah loves playing tennis." 
[EMBED] loves(X, Y). 
[GENERATE] ```prolog
loves(sarah, playing_tennis).
```

[USER] "Tom visits his grandparents." 
[EMBED] visits(X, Y). 
[GENERATE] `visits(tom, grandparent).`

[USER] "John's father is the brother of his uncle." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
uncle(X, Y) :- sibling(Parent, Uncle), parent(Uncle, X), parent(Parent, Y).
```

[USER] "David is employed by Amazon." 
[EMBED] employed(X, Z). 
[GENERATE] `employed(david, amazon).`

[USER] "Emily and her sister are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
sibling(emily, sister).
sibling(sister, emily).
```

[USER] "Michael lives in Los Angeles." 
[EMBED] lives_with(X, Y). 
[GENERATE] ```prolog
lives_in(michael, los_angeles).
```

[USER] "Jane teaches at a university." 
[EMBED] student_of(X, Z). 
[GENERATE] ```prolog
teaches_at_university(jane).
```

[USER] "Alex owns an apartment." 
[EMBED] owns(X, Y). 
[GENERATE] `owns(alex, apartment).`

[USER] "Laura loves singing." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(laura, singing).`

[USER] "John has a pet dog." 
[EMBED] has_pet(X, Y). 
[GENERATE] ```prolog
has_pet(john, dog).
```

[USER] "Sarah visits her cousins." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
cousin(X, Y) :- sibling(Parent1, Parent2), parent(Parent1, X), parent(Parent2, Y).
```

[USER] "Tom hates hiking." 
[EMBED] hates(X, Y). 
[GENERATE] ```prolog
hates(tom, hiking).
```

[USER] "John's grandmother is the sister of his great-grandmother." 
[EMBED] sibling(X, Y). 
[GENERATE] grandparent(great_grandfather(G), G) :- parent(Father, G), sibling(Mother, Father).

grandparent(grandmother(G), G) :- parent(Father, G), sibling(Mother, Father).  
grandparent(Mother, G) :- parent(Mother, Parent), parent(Parent, G).
grandparent(Father, G) :- parent(Father, Parent), parent(Parent, G).

sibling(JohnGrandMother, JohnGreatGrandmother) :- 
    grandparent(GreatGrandfather, John),
    parent(GreatGrandfather, GreatGrandmother),
    sibling(GreatGrandmother, Grandmother),
    parent(Grandmother, Mother).

[USER] "Rachel is employed by IBM." 
[EMBED] employed(X, Z). 
[GENERATE] `employed(rachel, ibm).`

[USER] "Emily and her brother are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
sibling(emily, bro).
sibling(bro, emily).
```

[USER] "Michael owns a car." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] ```prolog
owns_vehicle(michael, car).
```

[USER] "Jane is married to her colleague." 
[EMBED] married(X, Y). 
[GENERATE] ```prolog
married(jane, Colleague).
```

[USER] "Alex lives in Paris." 
[EMBED] loves(X, Y). 
[GENERATE] lives_in(alex, paris).

[USER] "Laura loves photography." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(laura, photography).`

[USER] "John has a pet bird." 
[EMBED] has_pet(X, Y). 
[GENERATE] ```prolog
has_pet(john, bird).
```

[USER] "Sarah visits her friends." 
[EMBED] friend(X, Y). 
[GENERATE] `visits(sarah, X) :- friend(sarah, X).`

[USER] "Tom has a sibling." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
has_sibling(tom).
```

[USER] "John's uncle is the brother of his cousin." 
[EMBED] sibling(X, Y). 
[GENERATE] `uncle(X, Y) :- sibling(Z, Parent), parent(Parent, X), child(Y, Grandparent), sibling(Grandparent, Z).`

This captures that John's uncle (Z) is a sibling of one of his parents (Parent) and the parent of John's cousin (Y), with both being children of siblings (Grandparent and Z).

[USER] "David teaches computer science at school." 
[EMBED] teacher_of(X, Y). 
[GENERATE] ```prolog
teacher_of(david, computer_science).
```

[USER] "Emily owns an apartment." 
[EMBED] married(X, Y). 
[GENERATE] `owns(emily, apartment).`

[USER] "Michael prefers hiking." 
[EMBED] can_travel(X, Y). 
[GENERATE] ```prolog
prefers_hiking(michael).
can_travel(hiker, X) :- prefers_hiking(hiker), hiking_path_to(X).
```

[USER] "Jane can travel to Japan." 
[EMBED] can_travel(X, Y). 
[GENERATE] ```prolog
can_travel(jane, japan).
```

[USER] "Alex is married to his colleague." 
[EMBED] married(X, Y). 
[GENERATE] ```prolog
married(alex, Colleague).
```

[USER] "Laura needs help with writing." 
[EMBED] needs_help_with(X, Y). 
[GENERATE] `needs_help_with(laura, writing).`

[USER] "John owns a house in Chicago." 
[EMBED] owns(X, Y). 
[GENERATE] `owns(john, house), located_in(house, chicago).`

[USER] "Sarah loves playing football." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(sarah, playing_football).`

[USER] "Tom visits his friends." 
[EMBED] friend(X, Y). 
[GENERATE] ```prolog
visits(tom, X) :- friend(tom, X).
```

[USER] "John's great-grandmother is the sister of his great-aunt." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
great_grandmother_of(john, X), sibling(X, Y), great_aunt_of(john, Y).
```

This logical property expresses that John's great-grandmother is a sister (sibling) to his great-aunt.

[USER] "Rachel is employed by Apple." 
[EMBED] employed(X, Z). 
[GENERATE] `employed_by(rachel, apple).`

[USER] "Emily and her friend are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
sibling(emily, friend).
sibling(friend, emilia).
```

[USER] "Michael lives in New York." 
[EMBED] lives_with(X, Y). 
[GENERATE] ```prolog
lives_in(michael, new_york).
```

[USER] "Jane teaches at a high school." 
[EMBED] student_of(X, Z). 
[GENERATE] ```prolog
teaches_at(jane, high_school).
```

[USER] "Alex owns an SUV." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] ```prolog
owns_vehicle(alex, suv).
```

[USER] "Laura loves cooking." 
[EMBED] loves(X, Y). 
[GENERATE] ```prolog
loves(laura, cooking).
```

[USER] "John has a pet rabbit." 
[EMBED] has_pet(X, Y). 
[GENERATE] ```prolog
has_pet(john, rabbit).
```

[USER] "Sarah visits her parents." 
[EMBED] parent(X, Y). 
[GENERATE] `visits(sarah, X), parent(X, Y).`

[USER] "Tom hates tennis." 
[EMBED] hates(X, Y). 
[GENERATE] ```prolog
hates(tom, tennis).
```

[USER] "John's great-uncle is the brother of his cousin." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
great_uncle(X, Z) :- sibling(Y, X), parent(P, Y), sibling(P, Q), child(Q, Z).
```

This defines a `great_uncle` relationship where:
- `X` is the great-uncle.
- `Z` is John (the person for whom we are establishing this family connection). 

The conditions are that:
- `Y` is the parent of John's cousin (`sibling(Y, X)` implies `Y` and `X` are siblings).
- `P` is the parent of `Y`.
- `Q` is a sibling of `P`, making `Q` an aunt or uncle to `Y`.
- `Z` is a child of `Q`, establishing that `Z` (John) is John's cousin. Hence, `X` is the great-uncle of `Z`.

[USER] "David owns a house." 
[EMBED] owns(X, Y). 
[GENERATE] ```prolog
owns(david, house).
```

[USER] "Emily and her sister are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
sibling(emily, sister).
sibling(sister, emily).
```

[USER] "Michael prefers skiing." 
[EMBED] loves(X, Y). 
[GENERATE] prefers(michael, skiing).

[USER] "Jane can travel to Australia." 
[EMBED] can_travel(X, Y). 
[GENERATE] ```prolog
can_travel(jane, australia).
```

[USER] "Alex is married to his friend." 
[EMBED] married(X, Y). 
[GENERATE] ```prolog
married(alex, Friend).
```

[USER] "Laura needs help with art." 
[EMBED] needs_help_with(X, Y). 
[GENERATE] `needs_help_with(laura, art).`

[USER] "John owns a bike." 
[EMBED] owns_vehicle(X, Y). 
[GENERATE] `owns_vehicle(john, bike).`

[USER] "Sarah loves playing basketball." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(sarah, playing_basketball).`

[USER] "Tom visits his friends." 
[EMBED] friend(X, Y). 
[GENERATE] ```prolog
visits(tom, Y) :- friend(tom, Y).
```

[USER] "John's great-grandfather is the brother of his grandfather." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
great_grandfather_brother_of_grandfather(john, X).
``` 

To define the relationship between John's great-grandfather and his grandfather:

1. Let `X` be John's great-grandfather.
2. The sentence states that `X` is the brother of John's grandfather.

The predicate `great_grandfather_brother_of_grandfather(john, X)` captures this familial relationship in Prolog notation.

[USER] "Rachel teaches at a university." 
[EMBED] student_of(X, Z). 
[GENERATE] `teaches_at_university(Rachel).`

[USER] "Emily and her colleague are siblings." 
[EMBED] sibling(X, Y). 
[GENERATE] `sibling(emily, colleague).`

[USER] "Michael lives in Los Angeles." 
[EMBED] lives_with(X, Y). 
[GENERATE] `lives_in(michael, los_angeles).`

[USER] "Jane is married to her friend." 
[EMBED] married(X, Y). 
[GENERATE] ```plaintext
married(jane, friend).
```

[USER] "Alex owns an apartment." 
[EMBED] owns(X, Y). 
[GENERATE] `owns(alex, apartment).`

[USER] "Laura loves music." 
[EMBED] loves(X, Y). 
[GENERATE] `loves(laura, music).`

[USER] "John has a pet parrot." 
[EMBED] married(X, Y). 
[GENERATE] `hasPetParrot(john).`

[USER] "Sarah visits her cousins." 
[EMBED] sibling(X, Y). 
[GENERATE] ```prolog
visits(sarah, cousin(C)).
```

[USER] "Tom hates swimming." 
[EMBED] hates(X, Y). 
[GENERATE] ```prolog
hates(tom, swimming).
```

